.TH "components/grownode/gn_mqtt_protocol.c" 3 "Thu Dec 30 2021" "GrowNode" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/grownode/gn_mqtt_protocol.c
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBgn_mqtt_startup_message_t\fP"
.br
.ti -1c
.RI "struct \fBgn_mqtt_node_config_message_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBTAG\fP   'gn_mqtt_protocol'"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBgn_mqtt_startup_message_t\fP * \fBgn_mqtt_startup_message_handle_t\fP"
.br
.ti -1c
.RI "typedef \fBgn_mqtt_node_config_message_t\fP * \fBgn_mqtt_node_config_message_handle_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fB_gn_mqtt_build_node_name\fP (\fBgn_config_handle_intl_t\fP \fBconfig\fP)"
.br
.ti -1c
.RI "\fBgn_server_status_t\fP \fBgn_mqtt_get_status\fP ()"
.br
.RI "returns the status of the server "
.ti -1c
.RI "void \fB_gn_mqtt_build_leaf_command_topic\fP (\fBgn_leaf_config_handle_t\fP _leaf_config, char *buf)"
.br
.ti -1c
.RI "void \fB_gn_mqtt_build_leaf_parameter_command_topic\fP (const \fBgn_leaf_config_handle_t\fP _leaf_config, const char *param_name, char *buf)"
.br
.ti -1c
.RI "void \fB_gn_mqtt_build_leaf_parameter_status_topic\fP (\fBgn_leaf_config_handle_t\fP _leaf_config, char *param_name, char *buf)"
.br
.ti -1c
.RI "void \fB_gn_mqtt_build_leaf_status_topic\fP (\fBgn_leaf_config_handle_t\fP _leaf_config, char *buf)"
.br
.ti -1c
.RI "void \fB_gn_mqtt_build_status_topic\fP (\fBgn_config_handle_intl_t\fP \fBconfig\fP, char *buf)"
.br
.ti -1c
.RI "void \fB_gn_mqtt_build_log_topic\fP (\fBgn_config_handle_intl_t\fP \fBconfig\fP, char *buf)"
.br
.ti -1c
.RI "void \fB_gn_mqtt_build_command_topic\fP (\fBgn_config_handle_intl_t\fP \fBconfig\fP, char *buf)"
.br
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_publish_leaf\fP (\fBgn_leaf_config_handle_t\fP _leaf_config)"
.br
.RI "subscribe leaf to the MQTT server in order to receive messages "
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_subscribe_leaf_param\fP (\fBgn_leaf_param_handle_t\fP _param)"
.br
.ti -1c
.RI "esp_err_t \fBgn_mqtt_send_node_config\fP (\fBgn_node_config_handle_t\fP _node_config)"
.br
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_send_leaf_param\fP (\fBgn_leaf_param_handle_t\fP _param)"
.br
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_send_log_message\fP (\fBgn_config_handle_t\fP \fB_config\fP, char *log_tag, \fBgn_log_level_t\fP level, char *message)"
.br
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_send_startup_message\fP (\fBgn_config_handle_t\fP \fB_config\fP)"
.br
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_send_reboot_message\fP (\fBgn_config_handle_t\fP \fB_config\fP)"
.br
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_send_reset_message\fP (\fBgn_config_handle_t\fP \fB_config\fP)"
.br
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_send_ota_message\fP (\fBgn_config_handle_t\fP \fB_config\fP)"
.br
.ti -1c
.RI "\fBgn_err_t\fP \fBgn_mqtt_send_leaf_message\fP (\fBgn_leaf_config_handle_t\fP _leaf, const char *msg)"
.br
.ti -1c
.RI "esp_err_t \fB_gn_mqtt_on_connected\fP (esp_mqtt_client_handle_t client)"
.br
.ti -1c
.RI "esp_err_t \fB_gn_mqtt_on_disconnected\fP (esp_mqtt_client_handle_t client)"
.br
.ti -1c
.RI "void \fBlog_error_if_nonzero\fP (const char *message, int error_code)"
.br
.ti -1c
.RI "void \fB_gn_mqtt_event_handler\fP (void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)"
.br
.ti -1c
.RI "esp_err_t \fBgn_mqtt_init\fP (\fBgn_config_handle_t\fP \fB_conf\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "EventGroupHandle_t \fB_gn_event_group_mqtt\fP"
.br
.ti -1c
.RI "const int \fB_GN_MQTT_CONNECTED_OK_EVENT_BIT\fP = BIT0"
.br
.ti -1c
.RI "const int \fB_GN_MQTT_CONNECTED_KO_EVENT_BIT\fP = BIT1"
.br
.ti -1c
.RI "\fBgn_config_handle_intl_t\fP \fB_config\fP"
.br
.ti -1c
.RI "char \fB_gn_cmd_topic\fP [\fB_GN_MQTT_MAX_TOPIC_LENGTH\fP]"
.br
.ti -1c
.RI "char \fB_gn_sts_topic\fP [\fB_GN_MQTT_MAX_TOPIC_LENGTH\fP]"
.br
.ti -1c
.RI "char \fB_gn_log_topic\fP [\fB_GN_MQTT_MAX_TOPIC_LENGTH\fP]"
.br
.ti -1c
.RI "char \fB__nodename\fP [13] = ''"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define TAG   'gn_mqtt_protocol'"

.SH "Typedef Documentation"
.PP 
.SS "typedef \fBgn_mqtt_node_config_message_t\fP* \fBgn_mqtt_node_config_message_handle_t\fP"

.SS "typedef \fBgn_mqtt_startup_message_t\fP* \fBgn_mqtt_startup_message_handle_t\fP"

.SH "Function Documentation"
.PP 
.SS "void _gn_mqtt_build_command_topic (\fBgn_config_handle_intl_t\fP config, char * buf)"

.SS "void _gn_mqtt_build_leaf_command_topic (\fBgn_leaf_config_handle_t\fP _leaf_config, char * buf)"

.SS "void _gn_mqtt_build_leaf_parameter_command_topic (const \fBgn_leaf_config_handle_t\fP _leaf_config, const char * param_name, char * buf)"

.SS "void _gn_mqtt_build_leaf_parameter_status_topic (\fBgn_leaf_config_handle_t\fP _leaf_config, char * param_name, char * buf)"

.SS "void _gn_mqtt_build_leaf_status_topic (\fBgn_leaf_config_handle_t\fP _leaf_config, char * buf)"

.SS "void _gn_mqtt_build_log_topic (\fBgn_config_handle_intl_t\fP config, char * buf)"

.SS "char* _gn_mqtt_build_node_name (\fBgn_config_handle_intl_t\fP config)\fC [inline]\fP"

.SS "void _gn_mqtt_build_status_topic (\fBgn_config_handle_intl_t\fP config, char * buf)"

.SS "void _gn_mqtt_event_handler (void * handler_args, esp_event_base_t base, int32_t event_id, void * event_data)"

.SS "esp_err_t _gn_mqtt_on_connected (esp_mqtt_client_handle_t client)"

.SS "esp_err_t _gn_mqtt_on_disconnected (esp_mqtt_client_handle_t client)"

.SS "\fBgn_server_status_t\fP gn_mqtt_get_status ()"

.PP
returns the status of the server 
.PP
\fBReturns\fP
.RS 4
the current status 
.RE
.PP

.SS "esp_err_t gn_mqtt_init (\fBgn_config_handle_t\fP _conf)"

.SS "\fBgn_err_t\fP gn_mqtt_publish_leaf (\fBgn_leaf_config_handle_t\fP _leaf_config)"

.PP
subscribe leaf to the MQTT server in order to receive messages 
.PP
\fBParameters\fP
.RS 4
\fIleaf_config\fP the leaf to start
.RE
.PP
\fBReturns\fP
.RS 4
status of the operation 
.RE
.PP

.SS "\fBgn_err_t\fP gn_mqtt_send_leaf_message (\fBgn_leaf_config_handle_t\fP _leaf, const char * msg)"

.SS "\fBgn_err_t\fP gn_mqtt_send_leaf_param (\fBgn_leaf_param_handle_t\fP _param)"

.SS "\fBgn_err_t\fP gn_mqtt_send_log_message (\fBgn_config_handle_t\fP _config, char * log_tag, \fBgn_log_level_t\fP level, char * message)"

.SS "esp_err_t gn_mqtt_send_node_config (\fBgn_node_config_handle_t\fP _node_config)"

.SS "\fBgn_err_t\fP gn_mqtt_send_ota_message (\fBgn_config_handle_t\fP _config)"

.SS "\fBgn_err_t\fP gn_mqtt_send_reboot_message (\fBgn_config_handle_t\fP _config)"

.SS "\fBgn_err_t\fP gn_mqtt_send_reset_message (\fBgn_config_handle_t\fP _config)"

.SS "\fBgn_err_t\fP gn_mqtt_send_startup_message (\fBgn_config_handle_t\fP _config)"

.SS "\fBgn_err_t\fP gn_mqtt_subscribe_leaf_param (\fBgn_leaf_param_handle_t\fP _param)"

.SS "void log_error_if_nonzero (const char * message, int error_code)"

.SH "Variable Documentation"
.PP 
.SS "char __nodename[13] = ''"

.SS "\fBgn_config_handle_intl_t\fP _config"

.SS "char _gn_cmd_topic[\fB_GN_MQTT_MAX_TOPIC_LENGTH\fP]"

.SS "EventGroupHandle_t _gn_event_group_mqtt"

.SS "char _gn_log_topic[\fB_GN_MQTT_MAX_TOPIC_LENGTH\fP]"

.SS "const int _GN_MQTT_CONNECTED_KO_EVENT_BIT = BIT1"

.SS "const int _GN_MQTT_CONNECTED_OK_EVENT_BIT = BIT0"

.SS "char _gn_sts_topic[\fB_GN_MQTT_MAX_TOPIC_LENGTH\fP]"

.SH "Author"
.PP 
Generated automatically by Doxygen for GrowNode from the source code\&.
